@using Database
@inject HttpClient Http
@rendermode InteractiveServer
@code {
    bool popup = false;
    bool popupHab = false;
    string resultNumber = "";
    string sum = "";
    string color = "";

    public void ActivePopup(int index, string dices)
    {
        popup = true;
        RollDice(index, dices);
    }

    PlayerHability newHability = new();

    public void ActiveHabCreation(bool active)
    {
        popupHab = active;
        if (!active){
            CharacterAndHability charAndhab = new();
            charAndhab.Character = Model;
            charAndhab.Hability = newHability;
            Http.PostAsJsonAsync($"http://localhost:80/api/home/CreateHability", charAndhab);
        }
    }

    public void DeActivePopup()
    {
        popup = false;
    }

    public void RollDice(int index, string dices)
    {
        //Roll a normal d20
        Random random = new Random();
        int num = random.Next(1, 20);
        if (num == 20)
        {
            color = "#41d93f";
        }
        else if (num == 1)
        {
            color = "#d93f3f";
        }
        else
        {
            color = "#fff";
        }

        if (index == 0)
        {
            //Roll a d20
            resultNumber = num.ToString();
            sum = "Dados: " + num;
        }

        if (index == 1)
        {
            string[] a = dices.Split("d");
            //Número inicial da Database ("2"d20)
            int init = Int32.Parse(a[0]);
            //Número secundário da Database (2d"20")
            int second = Int32.Parse(a[1]);;

            int soma = 0;
            //Roll damage dice (Database)
            for (int i = 0; i < init; i++)
            {
                int dmg = random.Next(1, second);
                soma += dmg;
            }
            resultNumber = soma.ToString();
        }
    }

    [Parameter] public int id { get; set; }
    Character? Model = new();
    List<int> habIds = new();
    List<PlayerHability> amogus = new();
    protected override async Task OnInitializedAsync()
    {
        Model = await Http.GetFromJsonAsync<Character>($"http://localhost:80/api/home/getCharacter/{id}");
        if (Model.Habilities != null)
        {
            habIds = Model.Habilities;
        }

        foreach (var h in habIds)
        {
            amogus.Add(await Http.GetFromJsonAsync<PlayerHability>($"http://localhost:80/api/home/GetHability/{h}"));
        }
    }
}

<div id="HabDiv">
    <button class="create" @onclick='() => ActiveHabCreation(true)'>Criar habilidade</button>
    <div class="sub-habilities-div">
        @foreach (var hab in amogus)
        {
            <h1>@hab.Name | @hab.Description | @hab.Dices</h1> 
            <button class="roll-dice" @onclick="(() => ActivePopup(1, hab.Dices))"><img class="icons"
                    src="@Assets["images/roll.png"]" alt=""></button>
        }
    </div>
</div>

@if (popup == true)
{
    <div>
        <h2>@resultNumber</h2>
        <button @onclick="(() => DeActivePopup())">Confirmar</button>
        <h3>@sum</h3>
    </div>
}

@if (popupHab == true)
{
    <div class="popup-hab">
        <div class="sky">
            <button class="img-button" @onclick='() => ActiveHabCreation(false)'><img
                    src="@Assets["images/cancel.png"]"></button>
            <h1>Monte sua habilidade aqui!</h1>
        </div>

        <div class="selection">
            <h1>Nome:</h1>
            <input @bind-name="newHability.Name" @bind-name:event="oninput" type="text" placeholder="Coloque o nome da sua habilidade aqui...">
        </div>

        <div class="selection">
            <h1>Descrição:</h1>
            <textarea @bind-description="newHability.Description" @bind-description:event="oninput" placeholder="Coloque a descrição da sua habilidade aqui..."></textarea>
        </div>

        <div class="selection">
            <h1>Efeito(Dados):</h1>
            <input @bind-dice="newHability.Dices" @bind-dice:event="oninput" type="text" placeholder="Coloque os dados de efeito da sua habilidade aqui...">
        </div>
        <button @onclick='() => ActiveHabCreation(false)'>Confirmar</button>
    </div>
}
